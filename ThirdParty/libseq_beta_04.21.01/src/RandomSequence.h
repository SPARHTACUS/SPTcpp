//////////////////////////////////////////////////////////////////////////////
//
// RandomSequence.h, 6.8.99, Ilja Friedel
//
//////////////////////////////////////////////////////////////////////////////
//
// Status: ok
//
//////////////////////////////////////////////////////////////////////////////
//
// Description: A drand48() dummy that stores the sequence in memory.
// Same structure as low discrepancy generators. Just easier to understand. ;-)
//
//////////////////////////////////////////////////////////////////////////////

#ifndef RANDOMSEQUENCE_USED
#define RANDOMSEQUENCE_USED

//////////////////////////////////////////////////////////////////////////////
// standard include files
//////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <assert.h>
#include <cmath>

//////////////////////////////////////////////////////////////////////////////
// own include files
//////////////////////////////////////////////////////////////////////////////

#include "Sequence.h"
#include "digit_gen.h"

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

class RandomSequence:public Sequence
{
   double * Seq;
   UL_int   length;

public: 
                ~RandomSequence()
		   {
		     if(Seq) delete[] Seq;
		   }

//////////////////////////////////////////////////////////////////////////////

                 RandomSequence(UL_int dim):Sequence(dim)
		   {
		     n0     = 0;
		     n      = 0;
		     Seq    = nullptr;

		     operator++();
		   }

//////////////////////////////////////////////////////////////////////////////

                 RandomSequence(UL_int dim, UL_int len):Sequence(dim)
		   {
		     UL_int i;

		     n0     = 0;
		     n      = 0;
		     length = len+1;
		     Seq    = new double[dimension*length];
		     assert(Seq);

		     for(i=0;i<dimension*length;i++) Seq[i]=drand47();		       
		   }

//////////////////////////////////////////////////////////////////////////////

	  void   random_restart(void)
	          {
		    UL_int i;

		    if(!Seq)
		      {
			n=0;
			for(i=0;i<dimension;i++) X[i]=drand47();
		      }
		    else
		      {	
			n=0;
			for(i=0;i<dimension*length;i++) Seq[i]=drand47();
		      }
		  }

//////////////////////////////////////////////////////////////////////////////

	  void   restart(void)
	          {
		    UL_int i;

		    if(!Seq)
		      {
			cerr << "Error: RandomSequence::restart() "
			     << "not possible!"
			     << endl;
			cerr << "Please use constructor "
			     << "RandomSequence(dim,length) for this." 
			     << endl;
			exit(1);
		      }
		    else
		      {
			n=0;
			for(i=0;i<dimension;i++) X[i]=Seq[n*dimension+i];
		      }
		  }

//////////////////////////////////////////////////////////////////////////////

     inline void operator++();
};

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

inline void RandomSequence::operator++()
{
   int i;
   check_next_dim();
   reset_next_dim();
//////////////////////////////////////////////////////////////////////////////
// we have to reset next_dim in every <<::operator++()>>
//////////////////////////////////////////////////////////////////////////////

   n++;
   if(!Seq) for(i=0;i<dimension;i++) X[i]=drand47();
   else     for(i=0;i<dimension;i++) X[i]=Seq[n*dimension+i];
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

#endif
