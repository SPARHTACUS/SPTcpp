////////////////////////////////////////////////////////////////////
//                                                                
// digit_gen.h, 09/11/00, Ilja Friedel                              
//
////////////////////////////////////////////////////////////////////
//                                                                
// Status: ok
//                                                                
////////////////////////////////////////////////////////////////////
//                                                                
// Creates an alias for drand48(), called drand47(). This is the
// central place to exchange all random number generators in libseq.
// 
// Provides also functions for creating random digits and random
// bitmaps (31 or 32 bits) 
////////////////////////////////////////////////////////////////////

#ifndef DIGIT_GEN_USED
#define DIGIT_GEN_USED

////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include <cmath>
#include <time.h>
//#include <unistd>
#include "own_types.h"

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline double drand47()
{
#ifdef USE_DRAND48
  return  (double(rand()) / RAND_MAX);
#endif
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline R_Elem random_Ring_Element(UL_int base)
{
  return ((UL_int)floor(((double)base)*drand47()));
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline UL_int get_31_random_bits()
{
  return (UL_int)(drand47()*2147483648.0);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline UL_int get_32_random_bits()
{
  return (UL_int)(drand47()*4294967296.0);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline void random_seed_for_drand48()
{
   time_t clock;

//   sleep(2);
   time(&clock);
   srand((long)clock);
//   srand48((long)clock);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline L_int int_pow(L_int a, UL_int b)
{
  L_int i,tmp;

  tmp=1;
  for(i=1;i<= L_int(b);i++) tmp*=a;

  return(tmp);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline L_int int_log(L_int a, UL_int b)
{
  L_int i,tmp;

  tmp=a;
  i=0;
  while(tmp>1) 
    {
      tmp=tmp/b;
      i++;
    }
  return(i);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

inline int is_prime(UL_int b)
{
  L_int i,tmp;

  if(b==0) return 0;
  if(b==1) return 0;
  if(b==2) return 1;
  if(b==3) return 1;

  i=2;
  tmp=(UL_int)sqrt(double(b))+1;

  while(i<=tmp) 
    {
      if((b%i)==0) return(0);
      i++;
    }
  return(1);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#endif
